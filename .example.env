# =============================================================================
# SIMPLU API - Environment Variables for Docker Compose
# =============================================================================
# Copy this file to .env and update the values according to your environment
# =============================================================================

# =============================================================================
# AWS CONFIGURATION
# =============================================================================

# AWS Region (default: us-east-1)
AWS_REGION=us-east-1

# AWS Credentials (for DynamoDB and Cognito)
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# =============================================================================
# AWS COGNITO CONFIGURATION
# =============================================================================

# Cognito User Pool ID (REQUIRED for authentication)
COGNITO_USER_POOL_ID=us-east-1_xxxxxxxxx

# Cognito Client ID (REQUIRED for authentication)
COGNITO_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# AWS DYNAMODB CONFIGURATION
# =============================================================================

# DynamoDB table name for business info (default: business-info)
DYNAMODB_BUSINESS_INFO_TABLE=business-info

# DynamoDB endpoint (for local development - comment out for AWS)
# DYNAMODB_ENDPOINT=http://localhost:8000

# =============================================================================
# CITRUS SHARDING SERVICE CONFIGURATION
# =============================================================================

# Citrus server URL (default: http://citrus:8080 for Docker)
CITRUS_SERVER_URL=http://citrus:8080

# Citrus API key (REQUIRED for Citrus integration)
CITRUS_API_KEY=your-citrus-api-key

# Citrus request timeout in milliseconds (default: 5000)
CITRUS_TIMEOUT=5000

# Citrus retry attempts (default: 3)
CITRUS_RETRY_ATTEMPTS=3

# =============================================================================
# CITRUS INTERNAL CONFIGURATION
# =============================================================================

# Citrus environment
CITRUS_ENV=development

# Citrus log level
CITRUS_LOG_LEVEL=info

# Database configuration for Citrus
CITRUS_DB_HOST=postgres
CITRUS_DB_PORT=5432
CITRUS_DB_USERNAME=postgres
CITRUS_DB_PASSWORD=postgres
CITRUS_DB_NAME=citrus

# Sharding configuration
CITRUS_MAX_BUSINESSES_PER_SHARD=3
CITRUS_SHARD_CREATION_ENABLED=true
CITRUS_AUTO_SCALING_ENABLED=true

# Citrus CORS origins
CITRUS_CORS_ORIGINS=http://localhost:3000

# Health check configuration
CITRUS_HEALTH_CHECK_INTERVAL=30
CITRUS_SHARD_MONITORING_ENABLED=true

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis password (optional)
REDIS_PASSWORD=

# Redis database number (default: 0)
REDIS_DB=0

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

# Log level (debug, info, warn, error)
LOG_LEVEL=info

# Enable request logging (true/false)
ENABLE_REQUEST_LOGGING=true

# Health check endpoint enabled (true/false)
HEALTH_CHECK_ENABLED=true

# Metrics collection enabled (true/false)
METRICS_ENABLED=true

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CORS origins (comma-separated list)
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Rate limiting - requests per minute
RATE_LIMIT_REQUESTS_PER_MINUTE=1000

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Seed data enabled (true/false)
SEED_DATA_ENABLED=false

# =============================================================================
# EXTERNAL SERVICE KEYS
# =============================================================================

# OpenRouter API key for AI agent
OPENROUTER_API_KEY=your-openrouter-api-key

# Elixir secret
EXS_SECRET=your-elixir-secret

# =============================================================================
# NOTES
# =============================================================================
#
# 1. REQUIRED VARIABLES FOR PRODUCTION:
#    - COGNITO_USER_POOL_ID
#    - COGNITO_CLIENT_ID
#    - AWS_ACCESS_KEY_ID
#    - AWS_SECRET_ACCESS_KEY
#    - CITRUS_API_KEY
#    - OPENROUTER_API_KEY
#    - EXS_SECRET
#
# 2. LOCAL DEVELOPMENT:
#    - Set DYNAMODB_ENDPOINT=http://localhost:8000 to use local DynamoDB
#    - Set CITRUS_SERVER_URL=http://citrus:8080 for Docker Compose
#    - Use local AWS credentials or IAM roles
#
# 3. DOCKER COMPOSE:
#    - All services will be available on localhost
#    - Citrus UI: http://localhost:8082
#    - Kafka UI: http://localhost:8081
#    - DynamoDB Local: http://localhost:8000
#    - PostgreSQL: localhost:5432
#    - Redis: localhost:6379
#
# 4. EXTERNAL SERVICES:
#    - Citrus manages all database shards automatically
#    - DynamoDB stores business metadata
#    - Cognito handles authentication
#    - No manual database setup required
#
# =============================================================================