# =============================================================================
# SIMPLU API - Environment Variables for Docker Compose
# =============================================================================
# Copy this file to .env and update the values according to your environment
# =============================================================================

# =============================================================================
# AWS CONFIGURATION
# =============================================================================

# AWS Region (default: us-east-1)
AWS_REGION=us-east-1

# AWS Credentials (for DynamoDB, Cognito, and Kinesis)
AWS_ACCESS_KEY_ID=your-aws-access-key-id
AWS_SECRET_ACCESS_KEY=your-aws-secret-access-key

# =============================================================================
# AWS COGNITO CONFIGURATION
# =============================================================================

# Cognito User Pool ID (REQUIRED for authentication)
COGNITO_USER_POOL_ID=us-east-1_xxxxxxxxx

# Cognito Client ID (REQUIRED for authentication)
COGNITO_CLIENT_ID=xxxxxxxxxxxxxxxxxxxxxxxxxx

# =============================================================================
# AWS DYNAMODB CONFIGURATION
# =============================================================================

# DynamoDB table name for business info (default: business-info)
DYNAMODB_BUSINESS_INFO_TABLE=business-info

# DynamoDB tables for AI Agent Server
DYNAMODB_SESSIONS_TABLE=ai-agent-sessions
DYNAMODB_MESSAGES_TABLE=ai-agent-messages
DYNAMODB_RAG_TABLE=rag-instructions
DYNAMODB_EXTERNAL_CREDENTIALS_TABLE=business-external-credentials

# DynamoDB table for Management Server
DYNAMODB_TABLE_NAME=businesses

# DynamoDB endpoint (for local development - comment out for AWS)
# DYNAMODB_ENDPOINT=http://localhost:8000

# =============================================================================
# AWS KINESIS CONFIGURATION
# =============================================================================

# Kinesis stream name for resource operations (default: resources-stream)
KINESIS_STREAM_NAME=resources-stream

# Kinesis stream name for Elixir notifications (used by AI Agent Server and App)
# Note: Resources Server sends notifications to Elixir via HTTP, not Kinesis
ELIXIR_STREAM_NAME=elixir-notifications

# Kinesis shard count (for stream creation, default: 1)
KINESIS_SHARD_COUNT=1

# =============================================================================
# CITRUS SHARDING SERVICE CONFIGURATION
# =============================================================================

# Citrus server URL (default: http://citrus:8080 for Docker)
CITRUS_SERVER_URL=http://citrus:8080

# Citrus API key (REQUIRED for Citrus integration)
CITRUS_API_KEY=your-citrus-api-key

# Citrus request timeout in milliseconds (default: 5000)
CITRUS_TIMEOUT=5000

# Citrus retry attempts (default: 3)
CITRUS_RETRY_ATTEMPTS=3

# =============================================================================
# CITRUS INTERNAL CONFIGURATION
# =============================================================================

# Citrus environment
CITRUS_ENV=development

# Citrus log level
CITRUS_LOG_LEVEL=info

# Database configuration for Citrus
CITRUS_DB_HOST=postgres
CITRUS_DB_PORT=5432
CITRUS_DB_USERNAME=postgres
CITRUS_DB_PASSWORD=postgres
CITRUS_DB_NAME=citrus

# Sharding configuration
CITRUS_MAX_BUSINESSES_PER_SHARD=3
CITRUS_SHARD_CREATION_ENABLED=true
CITRUS_AUTO_SCALING_ENABLED=true

# Citrus CORS origins
CITRUS_CORS_ORIGINS=http://localhost:3000

# Health check configuration
CITRUS_HEALTH_CHECK_INTERVAL=30
CITRUS_SHARD_MONITORING_ENABLED=true

# =============================================================================
# REDIS CONFIGURATION
# =============================================================================

# Redis URL (default: redis://localhost:6379)
REDIS_URL=redis://redis:6379

# Redis password (optional)
REDIS_PASSWORD=

# Redis database number (default: 0)
REDIS_DB=0

# =============================================================================
# JWT AUTHENTICATION
# =============================================================================

# JWT secret key for token signing (REQUIRED in production)
JWT_SECRET=your-super-secret-jwt-key-change-this-in-production

# JWT token expiration time (default: 1d)
JWT_EXPIRES_IN=1d

# =============================================================================
# AI AGENT SERVER CONFIGURATION
# =============================================================================

# OpenAI Configuration
OPENAI_API_KEY=your-openai-api-key
OPENAI_MODEL_NAME=gpt-4o-mini
OPENAI_MAX_TOKENS=8192
OPENAI_TEMPERATURE=0.1
OPENAI_TOP_P=0.8

# API Server Configuration
API_SERVER_URL=http://app:3000
API_SERVER_KEY=your-api-server-key

# =============================================================================
# WEBHOOKS CONFIGURATION
# =============================================================================

# Meta (Facebook/WhatsApp) Configuration
META_ACCESS_TOKEN=your-meta-access-token
META_PHONE_NUMBER_ID=your-meta-phone-number-id
META_WEBHOOK_VERIFY_TOKEN=your-meta-webhook-verify-token
META_APP_SECRET=your-meta-app-secret

# Twilio Configuration
TWILIO_ACCOUNT_SID=your-twilio-account-sid
TWILIO_AUTH_TOKEN=your-twilio-auth-token

# Webhook Logging
WEBHOOK_LOG_LEVEL=info

# =============================================================================
# CRON JOBS CONFIGURATION
# =============================================================================

# Cron Jobs Enabled
CRON_ENABLED=true
CRON_TIMEZONE=Europe/Bucharest
CRON_MEMORY_THRESHOLD_MB=500
CRON_CPU_THRESHOLD_PERCENT=80

# Cron Backup Configuration
CRON_BACKUP_ENABLED=true
CRON_BACKUP_RETENTION_DAYS=30

# Cron Cleanup Configuration
CRON_CLEANUP_RESOLVED_SESSIONS_DAYS=30
CRON_CLEANUP_OLD_SESSIONS_DAYS=180
CRON_CLEANUP_INACTIVE_SESSIONS_HOURS=24
CRON_CLEANUP_ABANDONED_SESSIONS_HOURS=48
CRON_CLEANUP_OLD_MESSAGES_DAYS=90
CRON_CLEANUP_OLD_LOGS_DAYS=30

# Cron Reminders Configuration
CRON_REMINDERS_ENABLED=true
CRON_REMINDERS_HOURS_BEFORE=2

# Cron Reports Configuration
CRON_REPORTS_ENABLED=true
CRON_REPORTS_RECIPIENTS=admin@example.com,manager@example.com

# Cron Monitoring Configuration
CRON_MONITORING_ENABLED=true
CRON_MONITORING_CHECK_INTERVAL_MINUTES=30

# =============================================================================
# MANAGEMENT SERVER CONFIGURATION
# =============================================================================

# Stripe Configuration
STRIPE_SECRET_KEY=your-stripe-secret-key
STRIPE_DENTAL_PRICE_ID=price_dental_monthly
STRIPE_GYM_PRICE_ID=price_gym_monthly
STRIPE_HOTEL_PRICE_ID=price_hotel_monthly

# Domain Configuration
BASE_DOMAIN=example.com

# CloudFormation Configuration
CLOUDFORMATION_STACK_PREFIX=react-app-

# =============================================================================
# RESOURCES SERVER CONFIGURATION
# =============================================================================

# Validation Configuration
VALIDATION_ENABLED=true

# =============================================================================
# ELIXIR NOTIFICATION HUB CONFIGURATION
# =============================================================================

# Elixir secret (REQUIRED for Phoenix)
EXS_SECRET=your-elixir-secret

# HTTP URLs for Elixir communication
AI_AGENT_HTTP_URL=http://ai-agent-server:3000
RESOURCES_SERVER_HTTP_URL=http://resources-server:3001

# Elixir WebSocket and HTTP URLs for AI Agent Server
ELIXIR_WEBSOCKET_URL=ws://notification-hub:4000/socket/websocket
ELIXIR_HTTP_URL=http://notification-hub:4000
ELIXIR_TIMEOUT=5000
ELIXIR_RETRY_ATTEMPTS=3

# =============================================================================
# LOGGING AND MONITORING
# =============================================================================

# Log level (debug, info, warn, error)
LOG_LEVEL=info

# Enable request logging (true/false)
ENABLE_REQUEST_LOGGING=true

# Health check endpoint enabled (true/false)
HEALTH_CHECK_ENABLED=true

# Metrics collection enabled (true/false)
METRICS_ENABLED=true

# =============================================================================
# SECURITY CONFIGURATION
# =============================================================================

# CORS origins (comma-separated list)
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Rate limiting - requests per minute
RATE_LIMIT_REQUESTS_PER_MINUTE=1000

# =============================================================================
# DEVELOPMENT CONFIGURATION
# =============================================================================

# Seed data enabled (true/false)
SEED_DATA_ENABLED=false

# =============================================================================
# NOTES
# =============================================================================
#
# 1. REQUIRED VARIABLES FOR PRODUCTION:
#    - COGNITO_USER_POOL_ID
#    - COGNITO_CLIENT_ID
#    - AWS_ACCESS_KEY_ID
#    - AWS_SECRET_ACCESS_KEY
#    - CITRUS_API_KEY
#    - JWT_SECRET
#    - EXS_SECRET
#    - OPENAI_API_KEY
#    - STRIPE_SECRET_KEY (if using payments)
#
# 2. LOCAL DEVELOPMENT:
#    - Set DYNAMODB_ENDPOINT=http://localhost:8000 to use local DynamoDB
#    - Set CITRUS_SERVER_URL=http://citrus:8080 for Docker Compose
#    - Use local AWS credentials or IAM roles
#
# 3. DOCKER COMPOSE:
#    - All services will be available on localhost
#    - App: http://localhost:3000
#    - Resources Server: http://localhost:3002
#    - AI Agent Server: http://localhost:3001
#    - Notification Hub: http://localhost:4000
#    - Citrus UI: http://localhost:8082
#    - DynamoDB Local: http://localhost:8000
#    - PostgreSQL: localhost:5432
#    - Redis: localhost:6379
#
# 4. EXTERNAL SERVICES:
#    - Citrus manages all database shards automatically
#    - DynamoDB stores business metadata and AI agent data
#    - Cognito handles authentication
#    - Kinesis handles resource operations streaming
#    - No manual database setup required
#
# 5. COMMUNICATION FLOW:
#    - App (API server) and AI Agent Server are Kinesis stream producers
#    - Resources Server consumes from Kinesis streams and sends HTTP notifications to Elixir
#    - AI Agent Server sends HTTP notifications to Elixir
#    - Elixir Notification Hub receives HTTP communication from AI Agent Server and Resources Server
#    - WebSocket connections are managed by Elixir Notification Hub
#
# 6. WEBHOOKS:
#    - Meta (Facebook/WhatsApp) webhooks for messaging
#    - Twilio webhooks for SMS
#    - All webhooks require proper signature validation
#
# 7. CRON JOBS:
#    - Automatic cleanup of old sessions and messages
#    - Backup and monitoring tasks
#    - Reminder notifications
#    - Performance monitoring
#
# =============================================================================