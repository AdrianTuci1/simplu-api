/**
 * Script pentru actualizarea credentials Meta existente √Æn DynamoDB
 * RuleazƒÉ: node scripts/update-meta-credentials.js
 */

const { DynamoDBClient } = require('@aws-sdk/client-dynamodb');
const { DynamoDBDocumentClient, UpdateCommand, GetCommand } = require('@aws-sdk/lib-dynamodb');

// Configurare DynamoDB
const dynamoDBClient = new DynamoDBClient({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID,
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY,
  },
});

const dynamoClient = DynamoDBDocumentClient.from(dynamoDBClient);

const TABLE_NAME = process.env.DYNAMODB_EXTERNAL_CREDENTIALS_TABLE || 'business-external-credentials';
const BUSINESS_ID = process.env.BUSINESS_ID || 'B0100001';
const LOCATION_ID = process.env.LOCATION_ID || 'L0100001';

async function updateMetaCredentials() {
  try {
    console.log(`üìã Verificare credentials existente pentru businessId: ${BUSINESS_ID}, locationId: ${LOCATION_ID}...`);
    
    // Mai √Ænt√¢i verificƒÉ ce existƒÉ
    const getResult = await dynamoClient.send(new GetCommand({
      TableName: TABLE_NAME,
      Key: {
        businessId: BUSINESS_ID,
        serviceType: `meta#${LOCATION_ID}`, // Format: meta#L0100001
      },
    }));

    if (getResult.Item) {
      console.log('‚úÖ GƒÉsit record existent:');
      console.log(JSON.stringify(getResult.Item, null, 2));
      console.log('\n');
    } else {
      console.log('‚ö†Ô∏è  Nu existƒÉ record, va fi creat unul nou.\n');
    }

    // PregƒÉte»ôte credentials noi
    const newCredentials = {
      accessToken: process.env.META_ACCESS_TOKEN || '',
      phoneNumberId: process.env.META_PHONE_NUMBER_ID || '',
      appSecret: process.env.META_APP_SECRET || '',
      phoneNumber: process.env.META_PHONE_NUMBER || '',
      pageId: process.env.META_PAGE_ID || '',
      businessAccountId: process.env.META_BUSINESS_ACCOUNT_ID || '',
    };

    console.log('üìù Actualizare credentials cu:');
    console.log('   - accessToken:', newCredentials.accessToken ? `‚úÖ ${newCredentials.accessToken.substring(0, 20)}...` : '‚ùå GOL');
    console.log('   - phoneNumberId:', newCredentials.phoneNumberId || '‚ùå GOL');
    console.log('   - appSecret:', newCredentials.appSecret ? `‚úÖ ${newCredentials.appSecret.substring(0, 10)}...` : '‚ùå GOL');
    console.log('   - phoneNumber:', newCredentials.phoneNumber || '‚ö†Ô∏è  GOL (op»õional)');
    console.log('   - pageId:', newCredentials.pageId || '‚ö†Ô∏è  GOL (op»õional, necesar pentru Instagram/Messenger)');
    console.log('   - businessAccountId:', newCredentials.businessAccountId || '‚ö†Ô∏è  GOL (op»õional)');
    console.log('\n');

    if (!newCredentials.accessToken || !newCredentials.appSecret) {
      console.error('‚ùå EROARE: META_ACCESS_TOKEN »ôi META_APP_SECRET sunt OBLIGATORII!');
      console.error('\nüìã SeteazƒÉ-le √Æn .env:');
      console.error('   META_ACCESS_TOKEN=your-access-token');
      console.error('   META_APP_SECRET=your-app-secret');
      console.error('   META_PHONE_NUMBER_ID=your-phone-number-id (pentru WhatsApp)');
      console.error('   META_PAGE_ID=your-page-id (pentru Instagram/Messenger)');
      process.exit(1);
    }

    // Update sau Insert
    console.log('üíæ Salvare √Æn DynamoDB...');
    await dynamoClient.send(new UpdateCommand({
      TableName: TABLE_NAME,
      Key: {
        businessId: BUSINESS_ID,
        serviceType: `meta#${LOCATION_ID}`,
      },
      UpdateExpression: 'SET credentials = :credentials, isActive = :isActive, updatedAt = :updatedAt, #metadata = :metadata',
      ExpressionAttributeNames: {
        '#metadata': 'metadata',
      },
      ExpressionAttributeValues: {
        ':credentials': newCredentials,
        ':isActive': true,
        ':updatedAt': new Date().toISOString(),
        ':metadata': {
          webhookUrl: process.env.META_WEBHOOK_URL || '',
          permissions: ['pages_messaging', 'pages_manage_metadata', 'pages_show_list'],
        },
      },
    }));

    console.log('‚úÖ SUCCESS! Credentials actualizate √Æn DynamoDB.\n');

    // VerificƒÉ rezultatul
    console.log('üîç Verificare finalƒÉ...');
    const finalResult = await dynamoClient.send(new GetCommand({
      TableName: TABLE_NAME,
      Key: {
        businessId: BUSINESS_ID,
        serviceType: `meta#${LOCATION_ID}`,
      },
    }));

    if (finalResult.Item) {
      console.log('‚úÖ Credentials salvate corect:');
      console.log('   - businessId:', finalResult.Item.businessId);
      console.log('   - serviceType:', finalResult.Item.serviceType);
      console.log('   - isActive:', finalResult.Item.isActive);
      console.log('   - credentials.accessToken:', finalResult.Item.credentials?.accessToken ? '‚úÖ SET' : '‚ùå MISSING');
      console.log('   - credentials.phoneNumberId:', finalResult.Item.credentials?.phoneNumberId || '‚ö†Ô∏è  NOT SET');
      console.log('   - credentials.appSecret:', finalResult.Item.credentials?.appSecret ? '‚úÖ SET' : '‚ùå MISSING');
      console.log('   - updatedAt:', finalResult.Item.updatedAt);
    }

    console.log('\nüéâ Gata! Acum √ÆncearcƒÉ din nou sƒÉ trimi»õi un test webhook!');
    
  } catch (error) {
    console.error('‚ùå Eroare:', error.message);
    console.error('\nüîç Detalii:', error);
    process.exit(1);
  }
}

// VerificƒÉ env vars
console.log('='.repeat(80));
console.log('üîß UPDATE META CREDENTIALS SCRIPT');
console.log('='.repeat(80));
console.log('\nüìã Environment Variables:\n');
console.log('AWS_REGION:', process.env.AWS_REGION || 'us-east-1 (default)');
console.log('AWS_ACCESS_KEY_ID:', process.env.AWS_ACCESS_KEY_ID ? '‚úÖ SET' : '‚ùå MISSING');
console.log('AWS_SECRET_ACCESS_KEY:', process.env.AWS_SECRET_ACCESS_KEY ? '‚úÖ SET' : '‚ùå MISSING');
console.log('DYNAMODB_EXTERNAL_CREDENTIALS_TABLE:', TABLE_NAME);
console.log('BUSINESS_ID:', BUSINESS_ID);
console.log('LOCATION_ID:', LOCATION_ID);
console.log('\nüìã Meta Credentials:\n');
console.log('META_ACCESS_TOKEN:', process.env.META_ACCESS_TOKEN ? '‚úÖ SET' : '‚ùå MISSING');
console.log('META_APP_SECRET:', process.env.META_APP_SECRET ? '‚úÖ SET' : '‚ùå MISSING');
console.log('META_PHONE_NUMBER_ID:', process.env.META_PHONE_NUMBER_ID ? '‚úÖ SET' : '‚ö†Ô∏è  NOT SET');
console.log('META_PAGE_ID:', process.env.META_PAGE_ID ? '‚úÖ SET' : '‚ö†Ô∏è  NOT SET');
console.log('META_PHONE_NUMBER:', process.env.META_PHONE_NUMBER ? '‚úÖ SET' : '‚ö†Ô∏è  NOT SET');
console.log('');
console.log('='.repeat(80));
console.log('\n');

if (!process.env.AWS_ACCESS_KEY_ID || !process.env.AWS_SECRET_ACCESS_KEY) {
  console.error('‚ùå AWS credentials lipsesc!');
  console.error('SeteazƒÉ: AWS_ACCESS_KEY_ID »ôi AWS_SECRET_ACCESS_KEY √Æn .env');
  process.exit(1);
}

if (!process.env.META_ACCESS_TOKEN || !process.env.META_APP_SECRET) {
  console.error('‚ùå Meta credentials lipsesc!');
  console.error('\nüìã Ob»õine-le din Meta Dashboard:');
  console.error('   1. Meta Developer Dashboard ‚Üí Your App');
  console.error('   2. Settings ‚Üí Basic:');
  console.error('      - App Secret ‚Üí META_APP_SECRET');
  console.error('   3. DupƒÉ OAuth flow:');
  console.error('      - Access Token ‚Üí META_ACCESS_TOKEN');
  console.error('   4. WhatsApp ‚Üí Configuration:');
  console.error('      - Phone Number ID ‚Üí META_PHONE_NUMBER_ID');
  console.error('   5. Pentru Instagram/Messenger:');
  console.error('      - Facebook Page ID ‚Üí META_PAGE_ID');
  console.error('');
  process.exit(1);
}

// RuleazƒÉ
updateMetaCredentials();

