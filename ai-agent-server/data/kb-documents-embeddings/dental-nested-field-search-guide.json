{
  "id": "dental-nested-field-search-guide",
  "title": "Nested Field Search Guide",
  "text": "# Nested Field Search Guide\n\n**Document Type:** guide\n**Business Type:** dental\n\n---\n\n## IMPORTANT: Căutarea după Câmpuri Nested\n\nSistemul suportă căutarea în câmpuri nested folosind **dot notation**. Acest lucru este ESENȚIAL pentru a găsi resurse după date din obiecte nested.\n\n## REGULI GENERALE:\n\n1. **Folosește ÎNTOTDEAUNA dot notation** pentru câmpuri nested: `data.field.subfield`\n2. **Toate câmpurile custom** sunt în obiectul `data`\n3. **Căutarea este case-insensitive** și suportă partial matching\n4. **Poți combina** mai multe filtre nested\n\n## CÂMPURI NESTED DISPONIBILE:\n\n### Pentru APPOINTMENTS (programări):\n\n**Căutare după pacient:**\n- `data.patient.name` - Numele pacientului din programare\n- `data.patient.id` - ID-ul pacientului\n\n**Căutare după medic:**\n- `data.doctor.name` - Numele medicului (alias: data.medic.name)\n- `data.medic.name` - Același câmp, alias alternativ\n- `data.doctor.id` - ID-ul medicului\n\n**Căutare după serviciu/tratament:**\n- `data.services[].name` - Pentru noua structură (array de servicii)\n- `data.service.name` - Pentru backward compatibility (structura veche)\n- `data.services[].id` - ID-ul serviciului\n\n**Căutare după status:**\n- `data.status` - Status programare (scheduled, confirmed, completed, cancelled, no_show)\n\n**Căutare după dată:**\n- `startDate` - Data programării (YYYY-MM-DD) - câmp top-level, NU nested!\n- `endDate` - Pentru range queries\n\n### Pentru PATIENTS (pacienți):\n\n**Căutare după date personale:**\n- `data.patientName` - Numele complet al pacientului\n- `data.patientPhone` - Numărul de telefon\n- `data.patientEmail` - Adresa de email\n- `data.cnp` - CNP\n- `data.birthDate` - Data nașterii\n\n### Pentru PLANS (planuri de tratament):\n\n**IMPORTANT:** Pentru planuri, TREBUIE să cauți după patientId!\n- `data.patientId` - ID-ul pacientului (REQUIRED pentru căutare)\n- `data.status` - Status plan (draft, proposed, accepted, in_progress, completed, cancelled)\n\n**WORKFLOW pentru planuri:**\n1. Caută mai întâi pacientul: `query_resources(resourceType: 'patient', params: {'data.patientName': 'Nume'})`\n2. Extrage patientId din rezultat\n3. Apoi caută planul: `query_resources(resourceType: 'plan', params: {'data.patientId': 'extracted_id'})`\n\n### Pentru DENTAL-CHART (fișe dentare):\n\n**IMPORTANT:** La fel ca pentru planuri, folosește patientId!\n- `data.patientId` - ID-ul pacientului (REQUIRED)\n\n**WORKFLOW pentru fișe dentare:**\n1. Caută pacientul după nume\n2. Extrage patientId\n3. Caută fișa: `query_resources(resourceType: 'dental-chart', params: {'data.patientId': 'id'})`\n\n### Pentru TREATMENTS/SERVICES (tratamente):\n\n- `data.treatmentName` - Numele tratamentului\n- `data.treatmentType` - Tipul tratamentului\n- `data.price` - Prețul\n- `data.duration` - Durata\n- `data.isPublic` - Dacă e public (true/false)\n\n### Pentru MEDICS (medici):\n\n- `data.medicName` - Numele medicului\n- `data.userId` - ID-ul user-ului asociat\n- `data.specialization` - Specializarea\n- `data.dutyDays` - Zilele de lucru (array)\n\n## EXEMPLE CONCRETE:\n\n### Exemplul 1: Caută toate programările pentru un pacient\n\n**Query:**\n```\nquery_resources(\n  resourceType: 'appointment',\n  action: 'list',\n  params: {\n    'data.patient.name': 'Maria Ionescu'\n  }\n)\n```\n\n**Rezultat:** Toate programările unde pacientul se numește Maria Ionescu (partial match, case-insensitive)\n\n### Exemplul 2: Caută programările unui medic pentru o anumită zi\n\n**Query:**\n```\nquery_resources(\n  resourceType: 'appointment',\n  action: 'list',\n  params: {\n    'data.doctor.name': 'Dr. Popescu',\n    'startDate': '2025-10-20'\n  }\n)\n```\n\n**Rezultat:** Toate programările Dr. Popescu pentru 20 octombrie 2025\n\n### Exemplul 3: Caută programări după serviciu (noua structură)\n\n**Query:**\n```\nquery_resources(\n  resourceType: 'appointment',\n  action: 'list',\n  params: {\n    'data.services[].name': 'Consultatie'\n  }\n)\n```\n\n**Rezultat:** Toate programările care conțin serviciul \"Consultatie\" în array-ul services\n\n### Exemplul 4: Caută pacient după email\n\n**Query:**\n```\nquery_resources(\n  resourceType: 'patient',\n  action: 'list',\n  params: {\n    'data.patientEmail': 'maria@example.com'\n  }\n)\n```\n\n### Exemplul 5: Găsește planul de tratament al unui pacient (2-step workflow)\n\n**Step 1 - Caută pacientul:**\n```\nquery_resources(\n  resourceType: 'patient',\n  action: 'list',\n  params: {\n    'data.patientName': 'Ion Popescu'\n  }\n)\n```\nRăspuns: `[{resourceId: 'pa2508-00015', data: {patientName: 'Ion Popescu', ...}}]`\n\n**Step 2 - Caută planul cu patientId:**\n```\nquery_resources(\n  resourceType: 'plan',\n  action: 'list',\n  params: {\n    'data.patientId': 'pa2508-00015',\n    'data.status': 'accepted'\n  }\n)\n```\n\n### Exemplul 6: Filtre multiple combinate\n\n**Query:**\n```\nquery_resources(\n  resourceType: 'appointment',\n  action: 'list',\n  params: {\n    'data.patient.name': 'Maria',\n    'data.status': 'scheduled',\n    'startDate': '2025-10-20',\n    'endDate': '2025-10-30'\n  }\n)\n```\n\n**Rezultat:** Programări pentru Maria, cu status scheduled, între 20 și 30 octombrie\n\n## GREȘELI COMUNE - NU FACE:\n\n❌ **GREȘIT:** `params: {patientName: 'Maria'}`\n✅ **CORECT:** `params: {'data.patientName': 'Maria'}`\n\n❌ **GREȘIT:** `params: {patient: {name: 'Maria'}}` (obiect nested)\n✅ **CORECT:** `params: {'data.patient.name': 'Maria'}` (dot notation)\n\n❌ **GREȘIT:** Căutare plan direct după nume pacient\n✅ **CORECT:** Caută mai întâi pacientul, apoi folosește patientId pentru plan\n\n❌ **GREȘIT:** `data.service.name` pentru noua structură\n✅ **CORECT:** `data.services[].name` (services este array)\n\n## BACKWARD COMPATIBILITY:\n\nPentru programări, sistemul suportă AMBELE structuri:\n- **Noua structură:** `services` (array) - PREFERRED\n- **Vechea structură:** `service` (object) - pentru compatibilitate\n\nCând cauți servicii în programări, folosește ambele pentru a acoperi toate cazurile:\n```\nparams: {\n  'data.services[].name': 'Consultatie'  // noua structură\n}\n```\nSAU pentru backward compatibility:\n```\nparams: {\n  'data.service.name': 'Consultatie'  // structura veche\n}\n```\n\n## TIPS:\n\n1. **Începe larg, apoi restrânge:** Dacă nu găsești nimic cu filtrul complet, încearcă mai puține filtre\n2. **Verifică spelling:** Căutarea este partial match, dar spelling-ul trebuie să fie corect\n3. **Pentru planuri și fișe dentare:** ÎNTOTDEAUNA folosește workflow-ul în 2 pași (pacient → id → plan/fișă)\n4. **Combină filtre:** Poți folosi mai multe filtre nested deodată pentru rezultate mai precise\n5. **Data queries:** startDate și endDate sunt câmpuri top-level, NU în data.* !\n",
  "metadata": {
    "businessType": "dental",
    "version": "1.0.0",
    "lastUpdated": "2025-10-16",
    "type": "guide",
    "category": "nested-field-search",
    "documentId": "dental-nested-field-search-guide",
    "source": "dental-knowledge-base",
    "importance": "critical"
  }
}

