{
  "id": "dental-conversation-patterns",
  "content": "CONVERSATION PATTERNS\n\nCREATEAPPOINTMENT:\nScenario: Operator vrea să creeze o programare nouă\n\nSteps:\nStep 1: Identifică pacientul\n  Question: \"Pentru cine este programarea? (nume pacient)\"\nStep 2: VERIFICĂ OBLIGATORIU dacă pacientul există\n  Tool: query_app_server\nStep 3: Identifică tratamentul necesar\n  Question: \"Ce tratament/serviciu? (consultație, detartraj, implant, etc.)\"\nStep 4: VERIFICĂ OBLIGATORIU dacă tratamentul există\n  Tool: query_app_server\nStep 5: VERIFICĂ working-hours și disponibilitate\nStep 6: Selectează medicul disponibil\n  Tool: query_app_server\n  Note: Verifică disponibilitatea medicului pentru data/ora selectată\nStep 7: DOAR ACUM creează programarea\n  Tool: call_frontend_function\n  Function: createResource\nStep 8: Confirmă succesul\n\nExample:\nUser: 'Programare pentru Maria Ionescu mâine la 14:00, consultație'\n\nAI Process:\n1. [query patient 'Maria Ionescu'] → NU EXISTĂ\n2. AI: 'Pacientul Maria Ionescu nu există. Trebuie să-l creăm. Aveți număr de telefon?'\n3. User: '0712345678'\n4. [call_frontend_function('createResource', {resourceType: 'patient', data: {patientName: 'Maria Ionescu', phone: '0712345678'}})] → CREAT cu id: pa2508-00015\n5. [query treatment 'consultație'] → EXISTĂ (tr2508-00001, duration: 30, price: 150)\n6. [query working-hours] → Mâine (Marți) 09:00-17:00, 14:00 OK\n7. [query appointments mâine] → Slot liber la 14:00\n8. [query medics] → Dr. Tucean disponibil\n9. [call_frontend_function('createResource', {resourceType: 'appointment', data: {...}})] → SUCCESS\n10. AI: 'Perfect! Programare creată pentru Maria Ionescu, mâine la 14:00, consultație cu Dr. Tucean.'\n\nUPDATEAPPOINTMENT:\nScenario: User editează o programare existentă\nContext: Frontend trimite appointmentId în context când user deschide edit form\n\nSteps:\nStep 1: Identifică ce să modifice\n  Examples: Schimbă ora la 15:00, Modifică doctorul, Schimbă data\nStep 2: Verifică context din frontend\n  Note: appointmentId vine din context\nStep 3: Actualizează programarea\n  Tool: call_frontend_function\n  Function: updateResource\n  Note: Trimite doar câmpurile modificate\nStep 4: Confirmă modificarea\n  Tool: send_elixir_notification\n\nExample:\nContext: {appointmentId: 'apt_123', editing: 'appointment'}\nUser: 'Schimbă ora la 15:00'\nAI: [call_frontend_function('updateResource', {type: 'appointment', id: 'apt_123', data: {time: '15:00'}})] → 'Done! Programarea e acum la 15:00.'\n\nSEARCHANDDISPLAY:\nScenario: User caută informații\n\nExamples:\n- Query: \"Câte programări avem astăzi?\"\n  Action: query_app_server(resources, list, appointment, {date: today})\n  Response: \"Astăzi: 12 programări. 8 consultații, 3 tratamente, 1 implant. Prima la 9:00.\"\n\n- Query: \"Cine este programat mâine cu Dr. Tucean?\"\n  Action: query_app_server(resources, list, appointment, {date: tomorrow, medicId: '...'})\n  Response: \"Mâine Dr. Tucean are 8 pacienți: Ion Popescu (9:00), Maria Ionescu (10:00), ...\"\n\n- Query: \"Arată-mi pacienții cu numele Popescu\"\n  Action: query_app_server(resources, list, patient, {name: 'Popescu'})\n  Response: \"Am găsit 3 pacienți: 1) Ion Popescu (0712...), 2) Maria Popescu (0723...), 3) ...\"\n\n\n",
  "metadata": {
    "category": "conversationPatterns",
    "businessType": "dental",
    "priority": "critical"
  }
}