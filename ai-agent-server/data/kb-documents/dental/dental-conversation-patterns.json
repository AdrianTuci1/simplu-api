{
  "id": "dental-conversation-patterns",
  "content": "CONVERSATION PATTERNS\n\nCREATEAPPOINTMENT:\nScenario: User vrea să creeze o programare nouă\n\nSteps:\nStep 1: Identifică pacientul\n  Question: \"Pentru cine este programarea? (nume pacient)\"\nStep 2: Caută pacient în sistem\n  Tool: query_app_server\n  Note: Dacă nu există, sugerează crearea pacientului mai întâi\nStep 3: Identifică tratamentul\n  Question: \"Ce tratament doriți? (consultație, detartraj, etc.)\"\nStep 4: Verifică disponibilitate\n  Tool: query_app_server\n  Note: Listează programările existente pentru data dorită\nStep 5: Selectează medicul\n  Question: \"Cu ce doctor? (sau sugerează pe baza disponibilității)\"\nStep 6: Creează programarea\n  Tool: call_frontend_function\n  Function: createResource\n  Note: Folosește toate datele colectate\nStep 7: Confirmă crearea\n  Tool: send_elixir_notification\n  Note: Trimite notificare de succes\n\nExample:\nUser: 'Programare pentru Ion Popescu mâine la 14:00'\nAI: [caută pacient Ion Popescu] → [găsește] → [verifică disponibilitate mâine 14:00] → [liber] → 'Pentru ce tratament? Avem: consultație (30 min, 150 RON), detartraj (45 min, 200 RON)'\nUser: 'Consultație'\nAI: [call_frontend_function createResource cu toate datele] → 'Perfect! Programare creată pentru Ion Popescu, mâine 20 oct 2025 la 14:00, consultație cu Dr. Tucean. Confirmată!'\n\nUPDATEAPPOINTMENT:\nScenario: User editează o programare existentă\nContext: Frontend trimite appointmentId în context când user deschide edit form\n\nSteps:\nStep 1: Identifică ce să modifice\n  Examples: Schimbă ora la 15:00, Modifică doctorul, Schimbă data\nStep 2: Verifică context din frontend\n  Note: appointmentId vine din context\nStep 3: Actualizează programarea\n  Tool: call_frontend_function\n  Function: updateResource\n  Note: Trimite doar câmpurile modificate\nStep 4: Confirmă modificarea\n  Tool: send_elixir_notification\n\nExample:\nContext: {appointmentId: 'apt_123', editing: 'appointment'}\nUser: 'Schimbă ora la 15:00'\nAI: [call_frontend_function('updateResource', {type: 'appointment', id: 'apt_123', data: {time: '15:00'}})] → 'Done! Programarea e acum la 15:00.'\n\nSEARCHANDDISPLAY:\nScenario: User caută informații\n\nExamples:\n- Query: \"Câte programări avem astăzi?\"\n  Action: query_app_server(resources, list, appointment, {date: today})\n  Response: \"Astăzi: 12 programări. 8 consultații, 3 tratamente, 1 implant. Prima la 9:00.\"\n\n- Query: \"Cine este programat mâine cu Dr. Tucean?\"\n  Action: query_app_server(resources, list, appointment, {date: tomorrow, medicId: '...'})\n  Response: \"Mâine Dr. Tucean are 8 pacienți: Ion Popescu (9:00), Maria Ionescu (10:00), ...\"\n\n- Query: \"Arată-mi pacienții cu numele Popescu\"\n  Action: query_app_server(resources, list, patient, {name: 'Popescu'})\n  Response: \"Am găsit 3 pacienți: 1) Ion Popescu (0712...), 2) Maria Popescu (0723...), 3) ...\"\n\n\n",
  "metadata": {
    "category": "conversationPatterns",
    "businessType": "dental",
    "priority": "high"
  }
}