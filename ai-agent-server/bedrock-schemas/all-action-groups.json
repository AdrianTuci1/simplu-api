{
  "actionGroups": [
    {
      "name": "query_tools",
      "description": "Read-only queries for business data including appointments, patients, services, and resources",
      "schema": {
        "openapi": "3.0.0",
        "info": {
          "title": "Query Tools API",
          "version": "1.2.0",
          "description": "Read-only queries for business data"
        },
        "paths": {
          "/query_resources": {
            "post": {
              "summary": "Query resources (operators) via /api/resources",
              "description": "READ-ONLY. Use x-resource-type header to select resource kind (appointment, patient, treatment, medic, service, setting, ...). Supports action=list|get, optional resourceId for get, and arbitrary filters including startDate/endDate and nested fields like data.patientName.",
              "operationId": "query_resources",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["businessId", "locationId", "action", "resourceType"],
                      "properties": {
                        "businessId": { "type": "string" },
                        "locationId": { "type": "string" },
                        "action": { "type": "string", "enum": ["list", "get"] },
                        "resourceType": { "type": "string" },
                        "resourceId": { "type": "string" },
                        "params": { "type": "object" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Successful query" } }
            }
          },
          "/query_patient_booking": {
            "post": {
              "summary": "Patient booking operations",
              "description": "Actions: available-dates-with-slots (from,to,optional:serviceId,medicId), reserve (date,time,serviceId,customer,optional:medicId,duration), cancel-appointment (appointmentId,patientId,accessCode). For services listing, use query_resources with resourceType=treatment.",
              "operationId": "query_patient_booking",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["businessId", "locationId", "action", "params"],
                      "properties": {
                        "businessId": { "type": "string" },
                        "locationId": { "type": "string" },
                        "action": { "type": "string", "enum": ["available-dates-with-slots", "reserve", "cancel-appointment"] },
                        "params": { "type": "object" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Successful operation" } }
            }
          }
        }
      }
    },
    {
      "name": "frontend_tools",
      "description": "Call JavaScript functions in frontend that handle API operations for creating, updating, and deleting resources",
      "schema": {
        "openapi": "3.0.0",
        "info": {
          "title": "Frontend Interaction Tools API",
          "version": "1.0.0",
          "description": "Tools for calling frontend functions that handle API operations"
        },
        "paths": {
          "/call_frontend_function": {
            "post": {
              "summary": "Call JavaScript functions in the frontend",
              "description": "Call JavaScript functions in the frontend that handle API operations. The frontend sends context with each message (current menu, edited resource). Based on conversation, AI calls frontend functions to complete actions. Common functions: createResource, updateResource, deleteResource, submitForm, navigateTo, selectResource, closeModal",
              "operationId": "call_frontend_function",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["functionName"],
                      "properties": {
                        "functionName": { "type": "string" },
                        "parameters": { "type": "object" },
                        "businessId": { "type": "string" },
                        "locationId": { "type": "string" },
                        "sessionId": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Function call sent to frontend" } }
            }
          }
        }
      }
    },
    {
      "name": "notification_tools",
      "description": "Send notifications and external messages via Meta, Twilio, Email, and WebSocket",
      "schema": {
        "openapi": "3.0.0",
        "info": {
          "title": "Notification Tools API",
          "version": "1.0.0",
          "description": "Tools for sending notifications and external messages"
        },
        "paths": {
          "/send_external_message": {
            "post": {
              "summary": "Send external message via Meta WhatsApp, SMS, or Email",
              "description": "Send messages through external channels (WhatsApp via Meta, SMS via Twilio/SNS, Email via Gmail)",
              "operationId": "send_external_message",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["provider", "to", "message", "businessId"],
                      "properties": {
                        "provider": { "type": "string", "enum": ["meta", "sms", "email"] },
                        "to": { "type": "string" },
                        "message": { "type": "string" },
                        "subject": { "type": "string" },
                        "businessId": { "type": "string" },
                        "locationId": { "type": "string" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Message sent successfully" } }
            }
          },
          "/send_elixir_notification": {
            "post": {
              "summary": "Send notification to frontend via Elixir server",
              "description": "Send real-time notifications to frontend users through Elixir WebSocket server. Used for AI responses, drafts, and streaming chunks.",
              "operationId": "send_elixir_notification",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["businessId", "userId", "sessionId", "content"],
                      "properties": {
                        "businessId": { "type": "string" },
                        "userId": { "type": "string" },
                        "sessionId": { "type": "string" },
                        "messageId": { "type": "string" },
                        "content": { "type": "string" },
                        "context": { "type": "object" },
                        "draft": { "type": "object" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Notification sent successfully" } }
            }
          },
          "/broadcast_websocket_message": {
            "post": {
              "summary": "Broadcast message to WebSocket clients",
              "description": "Broadcasts a message to WebSocket clients connected to a specific business or user. Use this to send real-time updates, notifications, or AI responses to operators or customers.",
              "operationId": "broadcast_websocket_message",
              "requestBody": {
                "required": true,
                "content": {
                  "application/json": {
                    "schema": {
                      "type": "object",
                      "required": ["target", "event", "data"],
                      "properties": {
                        "target": { "type": "string", "enum": ["business", "user"] },
                        "businessId": { "type": "string" },
                        "userId": { "type": "string" },
                        "event": { "type": "string" },
                        "data": { "type": "object" }
                      }
                    }
                  }
                }
              },
              "responses": { "200": { "description": "Successful query" } }
            }
          }
        }
      }
    }
  ]
}